generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model Transaction {
  id          String          @id @default(cuid())
  txDate      DateTime        @default(now()) @map("tx_date")
  description String
  note        String?
  value       Decimal         @db.Decimal(10, 2)
  paid        Boolean         @default(false)
  type        TransactionType @default(EXPENSE)
  createdAt   DateTime        @default(now()) @map("created_at")
  updatedAt   DateTime        @default(now()) @updatedAt @map("updated_at")
  user        User            @relation(fields: [userId], references: [id])
  userId      String          @map("user_id")
  category    Category        @relation(fields: [categoryId], references: [id])
  categoryId  String          @map("category_id")
  TxAccount   TxAccount       @relation(fields: [txAccountId], references: [id])
  txAccountId String          @map("tx_account_id")
}

model Category {
  id           String        @id @default(cuid())
  name         String
  color        String?
  icon         String?
  type         CategoryType  @default(EXPENSE)
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @default(now()) @updatedAt @map("updated_at")
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String        @map("user_id")
  transactions Transaction[]

  @@unique([userId, name, type])
}

model TxAccount {
  id           String        @id @default(cuid())
  name         String
  color        String?
  icon         String?
  balance      Decimal       @default(0.0) @db.Decimal(10, 2)
  type         TxAccountType @default(CHECKING)
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @default(now()) @updatedAt @map("updated_at")
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String        @map("user_id")
  transactions Transaction[]

  @@unique([userId, name])
}

model Post {
  id        Int     @id @default(autoincrement())
  title     String
  content   String?
  published Boolean @default(false)
  author    User?   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String? @map("author_id")
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String  @map("provider_account_id")
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  oauth_token_secret       String?
  oauth_token              String?
  refresh_token_expires_in Int?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?     @map("email_verified")
  image         String?
  role          Role          @default(USER)
  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  transactions  Transaction[]
  categories    Category[]
  txAccounts    TxAccount[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  ADMIN  @map("admin")
  USER   @map("user")
  ROOT   @map("root")

  @@map("_role")
}

enum TransactionType {
  INCOME    @map("income")
  EXPENSE   @map("expense")
  TRANSFER  @map("transfer")

  @@map("_transaction_type")
}

enum TxAccountType {
  CHECKING  @map("checking")
  SAVINGS   @map("savings")
  WALLET    @map("wallet")

  @@map("_tx_account_type")
}

enum CategoryType {
  INCOME   @map("income")
  EXPENSE  @map("expense")

  @@map("_category_type")
}
